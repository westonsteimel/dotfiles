#!/bin/bash
set -e

help() {
	echo "update some stuff"
}

# Choose a user account to use
get_user() {
	if [ -z "${TARGET_USER-}" ]; then
		mapfile -t options < <(find /home/* -maxdepth 0 -printf "%f\\n" -type d)
		# if there is only one option just use that user
		if [ "${#options[@]}" -eq "1" ]; then
			readonly TARGET_USER="${options[0]}"
			echo "Using user account: ${TARGET_USER}"
			return
		fi

		# iterate through the user options and print them
		PS3='Which user account should be used? '

		select opt in "${options[@]}"; do
			readonly TARGET_USER=$opt
			break
		done
	fi
}

dcleanup(){
	local containers
	mapfile -t containers < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}

update_docker() {
    echo "Updating docker..."
	local user_home="/home/${TARGET_USER}"
    local docker_dir="${GO_PATH}/src/github.com/docker/docker-ce"

	# get the binary
	local tmp_tar=/tmp/docker.tgz
	local binary_uri="https://download.docker.com/linux/static/test/x86_64"
	local docker_version=$(curl --silent "https://api.github.com/repos/moby/moby/releases" | jq -r .[0].tag_name)
    local latest_build=${docker_version#"v"}
    
    if [ -x "$(command -v docker)" ]; then
        local installed_build=$(docker --version | pcregrep -o1 -e "version (.*),")
    fi

	if [[ "$latest_build" != "${installed_build}" ]]; then
        # Include contributed completions
        echo "Attempting to install docker version ${latest_build}..."
        mkdir -p /etc/bash_completion.d
        curl -sSL "https://raw.githubusercontent.com/docker/cli/master/contrib/completion/bash/docker" > /etc/bash_completion.d/docker
		(
			set -x
			echo $latest_build
            mkdir -p /tmp
            curl -fSL "${binary_uri}/docker-${latest_build}.tgz" -o "$tmp_tar"
            tar -C /tmp/ -xzvf "$tmp_tar"
            strip -s /tmp/docker/*
            # echo "${docker_sha256} ${tmp_tar}" | sha256sum -c -
			#tar -C /usr/local/bin --strip-components 1 -xzvf "$tmp_tar"
            #strip -s /usr/local/bin/docker-*
			
            # stop docker
            dcleanup || true
            rc-service docker stop || true

            cp /tmp/docker/* /usr/local/bin
            rm "${tmp_tar}"
			# remove binaries we don't need
			#rm /usr/local/bin/docker-containerd*
			docker -v
		)
		
		chmod +x /usr/local/bin/docker*

		# enable and start docker
		# rc-update add docker default
		rc-service docker start || true
	else 
		echo "docker is already up-to-date"
	fi
}

update_docker_machine() {
    echo "Updating docker-machine..."
    local LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' "https://github.com/docker/machine/releases/latest")
    local LATEST_VERSION=$(echo "${LATEST_RELEASE}" | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
    local latest_build="${LATEST_VERSION#v}"

    if [ -x "$(command -v docker-machine)" ]; then
        local installed_build=$(docker-machine --version | pcregrep -o1 -e "version (.*),")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        echo "Installing docker-machine version ${LATEST_VERSION}..."
        curl -fSL "https://github.com/docker/machine/releases/download/${LATEST_VERSION}/docker-machine-Linux-x86_64" -o /usr/local/bin/docker-machine
        # Verify the sha256sum
        #local SHASUM=$(curl -fSL "https://github.com/docker/machine/releases/download/${LATEST_VERSION}/sha256sum.txt" | awk '{ print $1 }')
        #if [ "$SHASUM" != "$(shasum -a 256 /usr/local/bin/docker-machine | awk '{ print $1 }')" ]; then echo "sha256sum mismatch!"; fi
        chmod a+x /usr/local/bin/docker-machine
        echo "docker-machine installed!"
    else
        echo "docker-machine is already up-to-date"
    fi
}

update_docker_compose() {
    echo "Updating docker-compose..."
    local LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' "https://github.com/docker/compose/releases/latest")
    local LATEST_VERSION=$(echo "${LATEST_RELEASE}" | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v docker-compose)" ]; then
        local installed_build=$(docker-compose --version | pcregrep -o1 -e "version (.*),")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        echo "Installing docker-compose version ${LATEST_VERSION}..."
        curl -fSL "https://github.com/docker/compose/releases/download/${LATEST_VERSION}/run.sh" -o /usr/local/bin/docker-compose
        chmod a+x /usr/local/bin/docker-compose
        echo "docker-compose installed!"
    else
        echo "docker-compose is already up-to-date"
    fi
}

update_hub() {
    echo "Updating hub..."
    local LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' "https://github.com/github/hub/releases/latest")
    local LATEST_VERSION=$(echo "${LATEST_RELEASE}" | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')    
    local latest_build="${LATEST_VERSION#v}"
    
    if [ -x "$(command -v hub)" ]; then
        local installed_build=$(hub --version | pcregrep -o1 -e "hub version (.*)")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        echo "Installing hub version ${LATEST_VERSION}..."
        curl -fSL "https://github.com/github/hub/releases/download/${LATEST_VERSION}/hub-linux-amd64-${LATEST_VERSION#v}.tgz" -o /tmp/hub.tar.gz
        mkdir -p /tmp/hub
        tar -C /tmp/hub --strip-components 1 -xzvf /tmp/hub.tar.gz
        strip -s /tmp/hub/bin/hub
        cp /tmp/hub/bin/hub /usr/local/bin
        rm /tmp/hub.tar.gz
        rm -r /tmp/hub
        chmod a+x /usr/local/bin/hub
        echo "hub installed!"
    else
        echo "hub is already up-to-date"
    fi
}

update_containerd() {
	rc-service containerd stop || true
    
    local tmp_tar=/tmp/containerd.tar.gz
	local containerd_version
	containerd_version=$(curl -sSL "https://api.github.com/repos/containerd/containerd/releases" | jq --raw-output .[0].tag_name)
	containerd_version="${containerd_version#v}"
	local binary_uri="https://github.com/containerd/containerd/releases/download/v${containerd_version}/containerd-${containerd_version}.linux-amd64.tar.gz"
	(
	set -x
	curl -fSL "$binary_uri" -o "$tmp_tar"
	tar -C /usr/local/bin --strip-components 1 -xzvf "$tmp_tar"
	rm "$tmp_tar"
	containerd -v
	)

	# enable and start containerd
	#rc-update add containerd default
	rc-service containerd start
}

update_runc() {
	local runc_version
	runc_version=$(curl -sSL "https://api.github.com/repos/opencontainers/runc/releases" | jq --raw-output .[0].tag_name)
	runc_version=${runc_version#v}
	local binary_uri="https://github.com/opencontainers/runc/releases/download/v${runc_version}/runc.amd64"
	(
	set -x
	curl -fSL "$binary_uri" -o "/sbin/runc"
	chmod +x /sbin/runc
	runc -v
	)
}

update_k8s() {
    echo "Updating minikube..."

    local LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' "https://github.com/kubernetes/minikube/releases/latest")
    local LATEST_VERSION=$(echo "${LATEST_RELEASE}" | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v minikube)" ]; then
        local installed_build=$(minikube version | pcregrep -o1 -e "minikube version: (.*)")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        curl -fSL "https://storage.googleapis.com/minikube/releases/${LATEST_VERSION}/minikube-linux-amd64" > /usr/local/bin/minikube
        chmod +x /usr/local/bin/minikube
        minikube version
    else
        echo "minikube is already up-to-date"
    fi
}

update_faas() {
    echo "Updating OpenFaaS CLI..."

    local LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' "https://github.com/openfaas/faas-cli/releases/latest")
    local LATEST_VERSION=$(echo "${LATEST_RELEASE}" | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v faas-cli)" ]; then
        local installed_build=$(faas-cli version | pcregrep -o1 -e "version: (.*)")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        curl -fSL "https://cli.openfaas.com" | sudo sh
    else
        echo "faas-cli is already up-to-date"
    fi
}

update_img() {
    echo "Updating Genuine Tools img..."
    local LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' "https://github.com/genuinetools/img/releases/latest")
    local LATEST_VERSION=$(echo "${LATEST_RELEASE}" | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v img)" ]; then
        local installed_build=$(img version | pcregrep -o1 -e "version     : (.*)")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        echo "Installing img version ${LATEST_VERSION}..."
        curl -fSL "https://github.com/genuinetools/img/releases/download/${LATEST_VERSION}/img-linux-amd64" -o /usr/local/bin/img
        # Verify the sha256sum
        local SHASUM=$(curl -fSL "https://github.com/genuinetools/img/releases/download/${LATEST_VERSION}/img-linux-amd64.sha256" | awk '{ print $1 }')
        if [ "$SHASUM" != "$(shasum -a 256 /usr/local/bin/img | awk '{ print $1 }')" ]; then echo "sha256sum mismatch!"; fi
        chmod a+x /usr/local/bin/img
        echo "img installed!"
    else
        echo "img is already up-to-date"
    fi
}

update_reg() {
    echo "Updating Genuine Tools reg..."
    local LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' "https://github.com/genuinetools/reg/releases/latest")
    local LATEST_VERSION=$(echo "${LATEST_RELEASE}" | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')
    
    echo "Installing reg version ${LATEST_VERSION}..."
    curl -fSL "https://github.com/genuinetools/reg/releases/download/${LATEST_VERSION}/reg-linux-amd64" -o /usr/local/bin/reg
    # Verify the sha256sum
    local SHASUM=$(curl -fSL "https://github.com/genuinetools/reg/releases/download/${LATEST_VERSION}/reg-linux-amd64.sha256" | awk '{ print $1 }')
    if [ "$SHASUM" != "$(shasum -a 256 /usr/local/bin/reg | awk '{ print $1 }')" ]; then echo "sha256sum mismatch!"; fi
    chmod a+x /usr/local/bin/reg
}

update_vagrant() {
    echo "Updating HashiCorp vagrant..."
    local LATEST_VERSION=$(curl -sSL "https://releases.hashicorp.com/vagrant/" | pcregrep -o1 "^.*\<a href=\"\/vagrant\/(.*)\/\"\>" | head -n 1
)
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v vagrant)" ]; then
        local installed_build=$(vagrant --version | pcregrep -o1 -e "Vagrant (.*)")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        (
            echo "Installing vagrant version ${LATEST_VERSION}..."
            curl -fSL "https://releases.hashicorp.com/vagrant/${LATEST_VERSION}/vagrant_${LATEST_VERSION}_linux_amd64.zip" -o /tmp/vagrant.zip
            cd /tmp
            unzip vagrant.zip
            cp /tmp/vagrant /usr/local/bin
            rm /tmp/vagrant.zip
            rm /tmp/vagrant
            chmod a+x /usr/local/bin/vagrant
            echo "vagrant installed!"
        )
    else
        echo "vagrant is already up-to-date"
    fi
}

update_consul() {
    echo "Updating HashiCorp consul..."
    local LATEST_VERSION=$(curl -sSL "https://releases.hashicorp.com/consul/" | pcregrep -o1 "^.*\<a href=\"\/consul\/(((?!(\+ent|\-beta)).)*)\/\"\>" | head -n 1
)
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v consul)" ]; then
        local installed_build=$(consul --version | pcregrep -o1 -e "Consul v(.*)\w?")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        (
            echo "Installing consul version ${LATEST_VERSION}..."
            curl -fSL "https://releases.hashicorp.com/consul/${LATEST_VERSION}/consul_${LATEST_VERSION}_linux_amd64.zip" -o /tmp/consul.zip
            cd /tmp
            unzip consul.zip
            cp /tmp/consul /usr/local/bin
            rm /tmp/consul.zip
            rm /tmp/consul
            chmod a+x /usr/local/bin/consul
            echo "consul installed!"
        )
    else
        echo "consul is already up-to-date"
    fi
}

update_nomad() {
    echo "Updating HashiCorp nomad..."
    local LATEST_VERSION=$(curl -sSL "https://releases.hashicorp.com/nomad/" | pcregrep -o1 "^.*\<a href=\"\/nomad\/(.*)\/\"\>" | head -n 1
)
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v nomad)" ]; then
        local installed_build=$(nomad --version | pcregrep -o1 -e "Nomad v(.*) .*")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        (
            echo "Installing nomad version ${LATEST_VERSION}..."
            curl -fSL "https://releases.hashicorp.com/nomad/${LATEST_VERSION}/nomad_${LATEST_VERSION}_linux_amd64.zip" -o /tmp/nomad.zip
            cd /tmp
            unzip nomad.zip
            cp /tmp/nomad /usr/local/bin
            rm /tmp/nomad.zip
            rm /tmp/nomad
            chmod a+x /usr/local/bin/nomad
            echo "nomad installed!"
        )
    else
        echo "nomad is already up-to-date"
    fi
}

update_terraform() {
    echo "Updating HashiCorp terraform..."
    local LATEST_VERSION=$(curl -sSL "https://releases.hashicorp.com/terraform/" | pcregrep -o1 "^.*\<a href=\"\/terraform\/(.*)\/\"\>" | head -n 1
)
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v terraform)" ]; then
        local installed_build=$(terraform --version | pcregrep -o1 -e "Terraform v(.*)")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
        (
            echo "Installing terraform version ${LATEST_VERSION}..."
            curl -fSL "https://releases.hashicorp.com/terraform/${LATEST_VERSION}/terraform_${LATEST_VERSION}_linux_amd64.zip" -o /tmp/terraform.zip
            cd /tmp
            unzip terraform.zip
            cp /tmp/terraform /usr/local/bin
            rm /tmp/terraform.zip
            rm /tmp/terraform
            chmod a+x /usr/local/bin/terraform
            echo "terraform installed!"
        )
    else
        echo "terraform is already up-to-date"
    fi
}

update_vault() {
	echo "Updating HashiCorp vault..."
    local LATEST_VERSION=$(curl -sSL "https://releases.hashicorp.com/vault/" | pcregrep -o1 "^.*\<a href=\"\/vault\/(.*)\/\"\>" | head -n 1)
    local latest_build="${LATEST_VERSION}"
    
    if [ -x "$(command -v vault)" ]; then
        local installed_build=$(vault --version | pcregrep -o1 -e "Vault v(.*)")
    fi

    if [[ "$latest_build" != "$installed_build" ]]; then
		(
    		echo "Installing vault version ${LATEST_VERSION}..."
            curl -fSL "https://releases.hashicorp.com/vault/${LATEST_VERSION}/vault_${LATEST_VERSION}_linux_amd64.zip" -o /tmp/vault.zip
            cd /tmp
            unzip vault.zip
            cp /tmp/vault /usr/local/bin
            rm /tmp/vault.zip
            rm /tmp/vault
            chmod a+x /usr/local/bin/vault
            echo "vault installed!"
        )
	else
		echo "vault is already up-to-date"
	fi
}

update_utils() {
    docker image pull westonsteimel/exa:edge
    docker image pull westonsteimel/hexyl:edge
    docker image pull westonsteimel/bat:edge
    docker image pull westonsteimel/procs:edge

    docker container create -ti --name exa westonsteimel/exa:edge
    docker container create -ti --name hexyl westonsteimel/hexyl:edge
    docker container create -ti --name bat westonsteimel/bat:edge
    docker container create -ti --name procs westonsteimel/procs:edge

    docker container cp exa:/usr/local/bin/exa /usr/local/bin/exa
    docker container cp hexyl:/usr/local/bin/hexyl /usr/local/bin/hexyl
    docker container cp bat:/usr/local/bin/bat /usr/local/bin/bat
    docker container cp procs:/usr/local/bin/procs /usr/local/bin/procs 

    docker container rm -f exa
    docker container rm -f hexyl 
    docker container rm -f bat
    docker container rm -f procs
}

update_rust() {
    rustup update
	rustc --version
}

update() {
	echo "running the update functions"

	# detect the OS for the update functions
	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		echo "Hey there Linux user. You rule."

		# on linux, make sure they are the super user
		if [ "$UID" -ne 0 ]; then
			echo "Please run as root"
			exit 1
		fi

		# update
		#update_runc;
		#update_containerd;
        update_hub;
		update_docker;
        #update_docker_machine;
        #update_docker_compose;
		#update_k8s;
        #update_img;
        #update_faas;
        #update_consul;
        #update_vagrant;
        #update_nomad;
		#update_terraform;
		#update_vault;
        update_utils;
		#update_rust;
	else
		echo "We don't have update functions for OS: ${OSTYPE}"
		echo "Moving on..."
	fi

	echo "updates complete"
}

main() {
	local arg=$1
	if [[ ! -z "$arg" ]]; then
		help
	else
		update
	fi
}

main "$@"
